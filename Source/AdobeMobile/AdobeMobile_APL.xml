<?xml version="1.0" encoding="utf-8"?>

<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<init>
		<log text="AdobeMobile init"/>

		<setStringFromProperty result="sAdobeMobileTrackingServer"          ini="Engine" section="/Script/AdobeMobile.AdobeMobileSettings" property="TrackingServer"   default=""/>
		<setStringFromProperty result="sAdobeMobileTrackingRSIDDevelopment" ini="Engine" section="/Script/AdobeMobile.AdobeMobileSettings" property="TrackingRSIDDevelopment"  default=""/>
		<setStringFromProperty result="sAdobeMobileTrackingRSIDShipping"    ini="Engine" section="/Script/AdobeMobile.AdobeMobileSettings" property="TrackingRSIDShipping" default=""/>
		<setStringFromProperty result="sAdobeMobileAppName"                 ini="Engine" section="/Script/AdobeMobile.AdobeMobileSettings" property="AppName"          default=""/>
		<setBoolFromProperty   result="bAdobeMobileOfflineTracking"         ini="Engine" section="/Script/AdobeMobile.AdobeMobileSettings" property="OfflineTracking"  default="true"/>
		<setIntFromProperty    result="iLifeCycleTimeout"                   ini="Engine" section="/Script/AdobeMobile.AdobeMobileSettings" property="LifecycleTimeout" default="900"/>

		<setStringReplace result="sAdobeMobileConfigResult" sourceFile="$S(PluginDir)/../../lib/ADBMobileConfig.json" find="$${app-name}$$" with="$S(sAdobeMobileAppName)" default=""/>

		<if condition="Distribution">
			<true>
				<setStringReplace result="sAdobeMobileConfigResult" source="$S(sAdobeMobileConfigResult)" find="$${tracking-rsid}$$" with="$S(sAdobeMobileTrackingRSIDShipping)" default=""/>
			</true>
			<false>
				<setStringReplace result="sAdobeMobileConfigResult" source="$S(sAdobeMobileConfigResult)" find="$${tracking-rsid}$$" with="$S(sAdobeMobileTrackingRSIDDevelopment)" default=""/>
			</false>
		</if>

		<setStringReplace result="sAdobeMobileConfigResult" source="$S(sAdobeMobileConfigResult)" find="&quot;$${offline-tracking}$$&quot;"  with="$B(bAdobeMobileOfflineTracking)" default="true"/>
		<setStringReplace result="sAdobeMobileConfigResult" source="$S(sAdobeMobileConfigResult)" find="&quot;$${lifecycle-timeout}$$&quot;" with="$I(iLifeCycleTimeout)" default="900"/>
		<setStringReplace resultFile="$S(PluginDir)/../../lib/ADBMobileConfig.generated.json" result="sAdobeMobileConfigResult" source="$S(sAdobeMobileConfigResult)" find="$${target-server}$$" with="$S(sAdobeMobileTrackingServer)" default=""/>

	</init>

	<!-- optional updates applied to AndroidManifest.xml -->
	<androidManifestUpdates>
		<addPermission android:name="android.permission.INTERNET"/>
		<addPermission android:name="android.permission.ACCESS_NETWORK_STATE"/>
	</androidManifestUpdates> 

	<!-- optional additions to proguard -->
	<proguardAdditions>
		<insert>

		</insert>
	</proguardAdditions>
	
	<!-- optional files or directories to copy to Intermediate/Android/APK -->
 	<resourceCopies>
		<copyDir  src="$S(EngineDir)/Plugins/GSG/AdobeMobile/lib/Android"      dst="$S(BuildDir)/libs" />
		<copyFile src="$S(PluginDir)/../../lib/ADBMobileConfig.generated.json" dst="$S(BuildDir)/ADBMobileConfig.json" />
	</resourceCopies>

	<!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
		<insert>
import com.adobe.mobile.*;
		</insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>

		</insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity onCreate metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>

	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
Config.setContext(this.getApplicationContext());		
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>

		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
		<insert>
Config.collectLifecycleData(this);
		</insert>
	</gameActivityOnPauseAdditions>


	<!-- optional additions to GameActivity onResume in GameActivity.java	-->
	<gameActivityOnResumeAdditions>
		<insert>
Config.collectLifecycleData(this);
		</insert>
	</gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions><![CDATA[

public static void AndroidThunkJava_AdobeMobile_TrackState(String state, String[] keys, String[] values) 
{
	Hashtable<String, String> contextData = new Hashtable<String, String>();

	for (int i = 0; i < keys.length; i++)
	{
		contextData.put(keys[i], values[i]);
    }

	Analytics.trackState(state, contextData);	
}

public static void AndroidThunkJava_AdobeMobile_TrackAction(String action, String[] keys, String[] values) 
{
	Hashtable<String, String> contextData = new Hashtable<String, String>();

	for (int i = 0; i < keys.length; i++)
	{
		contextData.put(keys[i], values[i]);
    }
	
	Analytics.trackAction(action, contextData);	
}
	

	]]></gameActivityOnActivityResultAdditions>
	
	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>

	</soLoadLibrary>
</root>
